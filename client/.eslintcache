[{"/Users/carytanner/code-projects/mern-shopping-list/client/src/index.js":"1","/Users/carytanner/code-projects/mern-shopping-list/client/src/App.js":"2","/Users/carytanner/code-projects/mern-shopping-list/client/src/components/NavbarApp.js":"3","/Users/carytanner/code-projects/mern-shopping-list/client/src/components/ListShopping.js":"4","/Users/carytanner/code-projects/mern-shopping-list/client/src/reducers/index.js":"5","/Users/carytanner/code-projects/mern-shopping-list/client/src/features/items/itemsSlice.js":"6","/Users/carytanner/code-projects/mern-shopping-list/client/src/components/ItemModal.js":"7","/Users/carytanner/code-projects/mern-shopping-list/client/src/api/api.js":"8","/Users/carytanner/code-projects/mern-shopping-list/client/src/features/items/authSlice.js":"9","/Users/carytanner/code-projects/mern-shopping-list/client/src/api/authAPI.js":"10","/Users/carytanner/code-projects/mern-shopping-list/client/src/components/RegisterModal.js":"11","/Users/carytanner/code-projects/mern-shopping-list/client/src/components/LoginModal.js":"12","/Users/carytanner/code-projects/mern-shopping-list/client/src/components/LogoutModal.js":"13"},{"size":439,"mtime":1608473684824,"results":"14","hashOfConfig":"15"},{"size":309,"mtime":1608304652788,"results":"16","hashOfConfig":"15"},{"size":1475,"mtime":1608557323454,"results":"17","hashOfConfig":"15"},{"size":2150,"mtime":1608553259835,"results":"18","hashOfConfig":"15"},{"size":233,"mtime":1608562798922,"results":"19","hashOfConfig":"15"},{"size":3360,"mtime":1608551794403,"results":"20","hashOfConfig":"15"},{"size":2120,"mtime":1608557431533,"results":"21","hashOfConfig":"15"},{"size":682,"mtime":1608562585925,"results":"22","hashOfConfig":"15"},{"size":3573,"mtime":1608562638771,"results":"23","hashOfConfig":"15"},{"size":1424,"mtime":1608562602374,"results":"24","hashOfConfig":"15"},{"size":2856,"mtime":1608562622046,"results":"25","hashOfConfig":"15"},{"size":2554,"mtime":1608554237151,"results":"26","hashOfConfig":"15"},{"size":1330,"mtime":1608535419104,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1klvr7",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"30"},"/Users/carytanner/code-projects/mern-shopping-list/client/src/index.js",[],["62","63"],"/Users/carytanner/code-projects/mern-shopping-list/client/src/App.js",[],"/Users/carytanner/code-projects/mern-shopping-list/client/src/components/NavbarApp.js",["64"],"import React, { useState } from \"react\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  Container,\n} from \"reactstrap\";\nimport RegisterModal from \"./RegisterModal\";\nimport LoginModal from \"./LoginModal\";\nimport LogoutModal from \"./LogoutModal\";\nimport { useSelector } from \"react-redux\";\n\nexport default function NavbarApp() {\n  const [isOpen, setIsOpen] = useState(false);\n  const { isAuthenticated, user } = useSelector((state) => state.auth);\n\n  const toggleOpen = () => {\n    setIsOpen((isOpen) => !isOpen);\n  };\n\n  const loggedIn = (\n    <>\n    <NavItem>\n        <span className=\"navbar-text mr-3\">\n          <strong>\n            {isAuthenticated && user ? `Welcome ${user.name}` : \"\"}\n          </strong>\n        </span>\n      </NavItem>\n      <NavItem>\n        <LogoutModal />\n      </NavItem>\n      \n    </>\n  );\n\n  const guestLinks = (\n    <>\n      <NavItem>\n        <RegisterModal />\n      </NavItem>\n      <NavItem>\n        <LoginModal />\n      </NavItem>\n    </>\n  );\n\n  return (\n    <>\n      <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\n        <Container>\n          <NavbarBrand href=\"/\">Shopping List</NavbarBrand>\n          <NavbarToggler onClick={toggleOpen} />\n          <Collapse isOpen={isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              {isAuthenticated ? loggedIn : guestLinks}\n            </Nav>\n          </Collapse>\n        </Container>\n      </Navbar>\n    </>\n  );\n}\n","/Users/carytanner/code-projects/mern-shopping-list/client/src/components/ListShopping.js",["65","66","67"],"import React, {useEffect} from 'react'\nimport {Container, ListGroup, ListGroupItem, Button} from 'reactstrap'\nimport {CSSTransition, TransitionGroup} from 'react-transition-group'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { deleteItem, asyncActions } from '../features/items/itemsSlice'\nimport ItemModal from './ItemModal'\nimport {asyncAuthActions} from '../features/items/authSlice'\n\n\nconst ListShopping = ( ) => {\n    const dispatch = useDispatch()\n    const {items} = useSelector(state => state.items)\n    const {token, user} = useSelector(state => state.auth)\n    const deleteToken = localStorage.getItem('token')\n\nuseEffect(()=>{\n    dispatch(asyncActions.getAllItems())\n    dispatch(asyncAuthActions.loadUserThunk(token))\n}, [dispatch])\n\nconst handleDelete = (itemId) => {\n    dispatch(asyncActions.deleteItemThunk({id: itemId, token: deleteToken}))\n    \n}\n\n    return (\n        \n        <>\n        \n            <Container>\n                \n                <ItemModal />\n                \n                <ListGroup>\n                    <TransitionGroup className=\"shopping-list\">\n                        {items && items.map(({_id, name}) => {\n                            return <CSSTransition key={_id} timeout={500} classNames=\"fade\">\n                                <ListGroupItem >\n                                   \n                                    <Button \n                                    className=\"remove-btn mr-3\" \n                                    color=\"danger\" \n                                    size=\"sm\"\n                                    onClick={()=> {handleDelete({_id})}}\n                                    >&times;</Button>\n                                    {name}\n                                </ListGroupItem>\n                            </CSSTransition>\n                        })}\n                    </TransitionGroup>\n                </ListGroup>\n            </Container>\n            </>\n\n    )\n}\n\n\n// TO DO: learn to to do prop typing!\n\n// ListShopping.propTypes = {\n// addItem: PropTypes.func.isRequired,\n// items: PropTypes.object.isRequired\n\n// }\n\n\nexport default ListShopping ","/Users/carytanner/code-projects/mern-shopping-list/client/src/reducers/index.js",[],"/Users/carytanner/code-projects/mern-shopping-list/client/src/features/items/itemsSlice.js",[],"/Users/carytanner/code-projects/mern-shopping-list/client/src/components/ItemModal.js",["68"],"import React, {useState} from 'react'\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Alert\n  } from 'reactstrap';\n\n  import { useDispatch, useSelector } from 'react-redux'\n  import { addItem, asyncActions } from '../features/items/itemsSlice'\n \n\n  export default function ItemModal(){\n    const {token, isAuthenticated} = useSelector(state => state.auth)\n    const {error, status} = useSelector(state => state.items) \n    \n    // logical for modal\n    let [isOpen, setIsOpen] = useState(false)\n    \n\n    const toggleModal = ()=>{\n        setIsOpen(isOpen = !isOpen)\n    }\n    //control input\n    const [inputName, setInputName] = useState('')\n\n// submit and send to redux store\n    const dispatch = useDispatch()\n    const onSubmit = (event)=>{\n       event.preventDefault()\n       dispatch(asyncActions.addItemThunk({name: inputName, token}))\n        toggleModal()\n        setInputName('')\n       \n    }\n\n\n    return(\n          <>\n            <Button \n                style={{marginBottom: \"2rem\"}} \n                color=\"dark\" \n                onClick={toggleModal}\n                disabled={isAuthenticated ? false : true }\n                >Add Item</Button>\n\n                <Modal isOpen={isOpen} toggle={toggleModal}>\n                <ModalHeader toggle={toggleModal}>Add to Shopping List</ModalHeader>\n                <ModalBody>\n                { error  ? <Alert color='danger'>\n                    {error ? status : null}\n                  </Alert> : null}\n                    <Form onSubmit={onSubmit}>\n                        <FormGroup>\n                            <Label for=\"item\">Item</Label>\n                            <Input type=\"text\" name=\"inputName\" placeholder=\"Add something to shopping list\" onChange={(event)=> setInputName(event.target.value)} value={inputName}> </Input>\n                        \n                        <Button className=\"mt-2\" type=\"submit\"> Submit </Button>\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n\n\n                </Modal>\n          </>\n      )\n  }","/Users/carytanner/code-projects/mern-shopping-list/client/src/api/api.js",[],"/Users/carytanner/code-projects/mern-shopping-list/client/src/features/items/authSlice.js",["69"],"import { createSlice, createAsyncThunk, } from \"@reduxjs/toolkit\";\nimport Axios from \"axios\";\n\nimport * as authAPI from \"../../api/authAPI\";\n\n\nconst loadUserThunk = createAsyncThunk(\"auth/loadUserThunk\", async (token) => {\n    const resp = await authAPI.loadUser(token);\n \n  return resp;\n});\n\nconst registerUserThunk = createAsyncThunk(\"auth/registerUserThunk\", async (userInfo) => {\n    const resp = await authAPI.registerUser(userInfo);\n \n  return resp;\n});\n\nconst loginUserThunk = createAsyncThunk(\"auth/loginUserThunk\", async (userInfo) => {\n    const resp = await authAPI.loginUser(userInfo);\n  \n  return resp;\n});\n\n\n\n\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    isLoading: null,\n    user: null,\n    error: null\n  },\n  reducers: {\n    clearAuth: {\n      reducer(state, action) {\n        localStorage.removeItem('token')\n        state.token = null;\n        state.isLoading = null;\n        state.isAuthenticated = false;\n        state.user = null;\n        state.error = null;\n      }\n    },\n    clearError: {\n        reducer(state, action) {\n          state.error = null;\n        }\n      },\n  },\n  extraReducers: {\n    [loadUserThunk.pending]: (state) => {\n      state.isLoading = true;\n    },\n\n    [loadUserThunk.fulfilled]: (state, action) => {\n        state.isLoading = null;\n        if(action.payload.status === 200){\n            state.user = action.payload.data;\n            state.isAuthenticated = true;\n            state.error = null;\n        } else {\n            state.user = null;\n            state.isAuthenticated = false;\n            state.error = {msg: action.payload.data.msg, status: action.payload.status}\n        }\n      \n      \n      \n      \n    },\n    [registerUserThunk.pending]: (state) => {\n        state.isLoading = true;\n      },\n  \n      [registerUserThunk.fulfilled]: (state, action) => {\n          state.isLoading = null;\n          if(action.payload.status === 200){\n              localStorage.setItem('token', action.payload.data.token)\n              state.user = action.payload.data.user;\n              state.isAuthenticated = true;\n              state.error = null;\n          } else {\n            localStorage.removeItem('token')\n              state.user = null;\n              state.isAuthenticated = false;\n              state.error = {msg: action.payload.data.msg, status: action.payload.status}\n          }\n          \n      },\n      [loginUserThunk.pending]: (state) => {\n        state.isLoading = true;\n      },\n  \n      [loginUserThunk.fulfilled]: (state, action) => {\n          state.isLoading = null;\n          if(action.payload.status === 200){\n              localStorage.setItem('token', action.payload.data.token)\n              state.user = action.payload.data.user;\n              state.isAuthenticated = true;\n              state.error = null;\n          } else {\n            localStorage.removeItem('token')\n              state.user = null;\n              state.isAuthenticated = false;\n              state.error = {msg: action.payload.data.msg, status: action.payload.data.status}\n          }\n          \n      },\n\n    [loadUserThunk.rejected]: (state, action) => {\n     const {msg, status, id } = action.payload \n    state.isLoading = false;\n      state.isAuthenticated = false;\n      state.user = null;\n      state.error = {msg, status, id}\n    },\n  },\n});\n\nexport default authSlice.reducer;\nexport const { clearAuth, clearError } = authSlice.actions\nexport const asyncAuthActions = {loadUserThunk, registerUserThunk, loginUserThunk}","/Users/carytanner/code-projects/mern-shopping-list/client/src/api/authAPI.js",[],"/Users/carytanner/code-projects/mern-shopping-list/client/src/components/RegisterModal.js",["70","71"],"import React, {useState, useEffect} from 'react'\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    NavLink,\n    Alert\n  } from 'reactstrap';\n\n  import { useDispatch, useSelector } from 'react-redux'\n  import { asyncAuthActions, clearError } from '../features/items/authSlice'\n\n  export default function RegisterModal(){\n      //auth state\n      const {isAuthenticated, error, user} = useSelector(state => state.auth)\n      \n    \n    // logical for modal\n    let [isOpen, setIsOpen] = useState(false)\n    \n\n    const toggleModal = ()=>{\n        setIsOpen(isOpen = !isOpen)\n        setName('')\n        setEmail('')\n        setPassword('')\n        dispatch(clearError())\n    }\n    //control input\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n// submit and send to redux store & DB \n    const dispatch = useDispatch()\n    const onSubmit = async (event)=> {\n       \n       event.preventDefault()\n        dispatch(asyncAuthActions.registerUserThunk({name, email, password}))\n    }\n\n    useEffect(()=> {\n            if(isOpen){\n                if(isAuthenticated){\n                    toggleModal()\n                    \n                }\n            }\n        }, [isAuthenticated])    \n        \n       \n    \n\n    return(\n          <>\n            <NavLink \n                href=\"#\"\n                onClick={toggleModal}>Register User</NavLink>\n                \n                <Modal isOpen={isOpen} toggle={toggleModal}>\n                <ModalHeader toggle={toggleModal}>Register</ModalHeader>\n                <ModalBody>\n                { error  ? <Alert color='danger'>\n                    {error ? error.msg : null}\n                  </Alert> : null}\n                  \n                    <Form onSubmit={onSubmit}>\n                        <FormGroup>\n                            <Label for=\"name\">Name</Label>\n                            <Input className=\"mb-2\" type=\"text\" name=\"name\" placeholder=\"Enter Name\" onChange={(event)=> setName(event.target.value)} value={name}> </Input>\n                            <Label for=\"email\">Email</Label>\n                            <Input className=\"mb-2\" type=\"text\" name=\"name\" placeholder=\"Enter Email\" onChange={(event)=> setEmail(event.target.value)} value={email}> </Input>\n                            <Label for=\"password\">Password</Label>\n                            <Input className=\"mb-2\"  type=\"text\" name=\"password\" placeholder=\"Enter Password\" onChange={(event)=> setPassword(event.target.value)} value={password}> </Input>\n                        <Button className=\"mt-2\" type=\"submit\"> Submit </Button>\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n\n\n                </Modal>\n          </>\n      )\n  }","/Users/carytanner/code-projects/mern-shopping-list/client/src/components/LoginModal.js",["72"],"import React, {useEffect, useState} from 'react'\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    NavLink,\n    Alert\n  } from 'reactstrap';\n\n  import { useDispatch, useSelector } from 'react-redux'\n  import { asyncAuthActions, clearError } from '../features/items/authSlice'\n  \n\n  export default function LoginModal(){\n      //auth state\n      const {isAuthenticated } = useSelector(state => state.auth)\n      const {error} = useSelector(state => state.auth)\n    \n    // logical for modal\n    let [isOpen, setIsOpen] = useState(false)\n    \n\n    const toggleModal = ()=>{\n        dispatch(clearError())\n        setEmail('')\n        setPassword('')\n        setIsOpen(isOpen = !isOpen)\n    }\n    //control input\n\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n// submit and send to redux store & DB \n    const dispatch = useDispatch()\n    const onSubmit = async (event)=> {\n        \n        event.preventDefault()\n        dispatch(asyncAuthActions.loginUserThunk({email, password}))\n       \n       }\n\n    useEffect(()=> {\n        if(isOpen){\n            if(isAuthenticated){\n                toggleModal()\n                \n            }\n        }\n    }, [isAuthenticated])\n    \n\n    return(\n          <>\n            <NavLink \n                href=\"#\"\n                onClick={toggleModal}>Login</NavLink>\n                \n                <Modal isOpen={isOpen} toggle={toggleModal}>\n                <ModalHeader toggle={toggleModal}>Login</ModalHeader>\n                <ModalBody>\n                { error  ? <Alert color='danger'>\n                    {error ? error.msg : null}\n                  </Alert> : null}\n                    <Form onSubmit={onSubmit}>\n                        <FormGroup>\n                            \n                            <Label for=\"email\">Email</Label>\n                            <Input className=\"mb-2\" type=\"text\" name=\"name\" placeholder=\"Enter Email\" onChange={(event)=> setEmail(event.target.value)} value={email}> </Input>\n                            <Label for=\"password\">Password</Label>\n                            <Input className=\"mb-2\"  type=\"text\" name=\"password\" placeholder=\"Enter Password\" onChange={(event)=> setPassword(event.target.value)} value={password}> </Input>\n                        <Button className=\"mt-2\" type=\"submit\"> Submit </Button>\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n\n\n                </Modal>\n          </>\n      )\n  }","/Users/carytanner/code-projects/mern-shopping-list/client/src/components/LogoutModal.js",["73","74","75","76","77","78","79"],"import React, {useState} from 'react'\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    NavLink,\n    Alert\n  } from 'reactstrap';\n\n  import { useDispatch, useSelector } from 'react-redux'\n  import { asyncAuthActions, clearAuth } from '../features/items/authSlice'\n\n  export default function LogoutModal(){\n      //auth state\n      \n    \n    // logical for modal\n    let [isOpen, setIsOpen] = useState(false)\n    \n\n    const toggleModal = ()=>{\n        setIsOpen(isOpen = !isOpen)\n    }\n \n\n// submit and send to redux store & DB \n    const dispatch = useDispatch() \n    \n // logout and close modal\n \n const logoutClose = ()=>{\n     dispatch(clearAuth())\n     toggleModal()\n }\n    \n\n    return(\n          <>\n            <NavLink \n                href=\"#\"\n                onClick={toggleModal}>Logout</NavLink>\n                \n                <Modal isOpen={isOpen} toggle={toggleModal}>\n                <ModalHeader toggle={toggleModal}>Logout</ModalHeader>\n                <ModalBody>\n                    <h4>Do you want to logout?</h4>\n                    <Button onClick={logoutClose}>Yes</Button>\n                    <Button className=\"ml-2\" onClick={toggleModal}>Cancel</Button>\n                </ModalBody>\n\n\n                </Modal>\n          </>\n      )\n  }\n",{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":9,"column":3,"nodeType":"86","messageId":"87","endLine":9,"endColumn":10},{"ruleId":"84","severity":1,"message":"88","line":6,"column":10,"nodeType":"86","messageId":"87","endLine":6,"endColumn":20},{"ruleId":"84","severity":1,"message":"89","line":14,"column":19,"nodeType":"86","messageId":"87","endLine":14,"endColumn":23},{"ruleId":"90","severity":1,"message":"91","line":20,"column":4,"nodeType":"92","endLine":20,"endColumn":14,"suggestions":"93"},{"ruleId":"84","severity":1,"message":"94","line":15,"column":12,"nodeType":"86","messageId":"87","endLine":15,"endColumn":19},{"ruleId":"84","severity":1,"message":"95","line":2,"column":8,"nodeType":"86","messageId":"87","endLine":2,"endColumn":13},{"ruleId":"84","severity":1,"message":"89","line":20,"column":38,"nodeType":"86","messageId":"87","endLine":20,"endColumn":42},{"ruleId":"90","severity":1,"message":"96","line":54,"column":12,"nodeType":"92","endLine":54,"endColumn":29,"suggestions":"97"},{"ruleId":"90","severity":1,"message":"96","line":55,"column":8,"nodeType":"92","endLine":55,"endColumn":25,"suggestions":"98"},{"ruleId":"84","severity":1,"message":"99","line":7,"column":5,"nodeType":"86","messageId":"87","endLine":7,"endColumn":9},{"ruleId":"84","severity":1,"message":"100","line":8,"column":5,"nodeType":"86","messageId":"87","endLine":8,"endColumn":14},{"ruleId":"84","severity":1,"message":"101","line":9,"column":5,"nodeType":"86","messageId":"87","endLine":9,"endColumn":10},{"ruleId":"84","severity":1,"message":"102","line":10,"column":5,"nodeType":"86","messageId":"87","endLine":10,"endColumn":10},{"ruleId":"84","severity":1,"message":"103","line":12,"column":5,"nodeType":"86","messageId":"87","endLine":12,"endColumn":10},{"ruleId":"84","severity":1,"message":"104","line":15,"column":25,"nodeType":"86","messageId":"87","endLine":15,"endColumn":36},{"ruleId":"84","severity":1,"message":"105","line":16,"column":12,"nodeType":"86","messageId":"87","endLine":16,"endColumn":28},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"no-unused-vars","'NavLink' is defined but never used.","Identifier","unusedVar","'deleteItem' is defined but never used.","'user' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.","ArrayExpression",["108"],"'addItem' is defined but never used.","'Axios' is defined but never used.","React Hook useEffect has missing dependencies: 'isOpen' and 'toggleModal'. Either include them or remove the dependency array.",["109"],["110"],"'Form' is defined but never used.","'FormGroup' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","'Alert' is defined but never used.","'useSelector' is defined but never used.","'asyncAuthActions' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},{"desc":"113","fix":"115"},"Update the dependencies array to be: [dispatch, token]",{"range":"116","text":"117"},"Update the dependencies array to be: [isAuthenticated, isOpen, toggleModal]",{"range":"118","text":"119"},{"range":"120","text":"119"},[752,762],"[dispatch, token]",[1310,1327],"[isAuthenticated, isOpen, toggleModal]",[1262,1279]]